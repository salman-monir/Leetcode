//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
    private:
    void bfs(int row,int col,vector<vector<int>> &vis,vector<vector<char>> &grid){
        vis[row][col]=1;
        queue<pair<int,int>>q;
        q.push({row,col});
        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();int rw,cl;
            int n=grid.size();
            int m=grid[0].size();
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    rw=row+i;
                    cl=col+j;
                    if((rw>=0 && rw<n) && (cl>=0 && cl<m) &&  (grid[rw][cl]=='1') && (!vis[rw][cl])  ){
                       //bfs(rw,cl,vis.grid); 
                       vis[rw][cl]=1;
                       q.push({rw,cl});
                    }
                } 
                    
            }
        }
    }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        int cnt=0;
        for(int row=0;row<n;row++){
          for(int col=0;col<m;col++){
              if(  (row>=0 && row<n)&&(col>=0 && col<m)  && (grid[row][col]=='1') && (!vis[row][col]) ){
                  cnt++;
                  bfs(row,col,vis,grid);
              }
          }
        }
          return cnt;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
